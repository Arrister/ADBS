Q.1.a) Write a program to implement constructor overloading, method overloading and static method.
class Test {
    double ar;
    static int a;
    String name, city;
    Test() {
        System.out.println("Example of Constructor Overloading");
        System.out.println("This is a default constructor, executing first...");
        System.out.println("This is a parameterized constructor");
    }
    Test(String n, String c) {
        name = n;
        city = c;
    }
    void calarea(double radius) {
        ar = 3.14 * radius * radius;
        System.out.println("Area of Circle: "+ar);
    }
    void calarea(double base, double height) {
        ar = 0.5 * base * height;
        System.out.println("Area of Triangle: "+ar);
    }
    static void disp() {
        a = 10;
        System.out.println("a: "+a);
    }
}
class Main {
    public static void main(String args[]) {
        Test obj1 = new Test();
        Test obj2 = new Test("Aaron","Mumbai");
        System.out.println("Name: "+obj2.name+"\nStudent City: "+obj2.city);
        obj1.calarea(5);
        obj1.calarea(7,5);
        System.out.println("Example of Static Method: ");
        Test.disp();
    }
}

Q.1.b) Write a program to implement the concept of Inheritance and Method Overriding:
class Base {
    void display() {
        System.out.println("Base Class Method.");
    }
}
class Derived extends Base {
    void display() {
        super.display();
        System.out.println("Derived Class Method.");
    }
}
class Main {
    public static void main(String args[]) {
        Derived obj = new Derived();
        obj.display();
    }
}

Q.2.a) Write a program to implement abstract methods, classes and functions
import java.util.*;
abstract class RoundShape {
  double radius;
  final double pi = 3.14;
  abstract void findarea();
  abstract void findvolume();
  void disp() {
    System.out.println("Example of an abstract method.");
  }
}
class Sphere extends RoundShape {
  double area;
  Scanner sc = new Scanner(System.in);
  void findarea() {
    System.out.println("Enter radius of Sphere: ");
    radius = sc.nextDouble();
    area = 4 * pi * radius * radius;
    System.out.println("Area of Sphere: "+area);
  }
  void findvolume() {
    System.out.println("Enter radius of Sphere: ");
    radius = sc.nextDouble();
    area = (4/3) * pi * (radius * radius * radius);
    System.out.println("Volume of Sphere: "+area);
  }
}
class Main {
  public static void main(String args[]) {
    Sphere s = new Sphere();
    s.disp();
    s.findarea();
    s.findvolume();
  }
}

Q.2.b) Write a program to implement concept of interfaces.
import java.util.*;
interface RoundShape {
  final double pi = 3.14;
  void findarea();
  void findvolume();
}
class Sphere implements RoundShape {
  double area, radius;
  Scanner sc = new Scanner(System.in);
  public void findarea() {
    System.out.println("Enter radius of Sphere: ");
    radius = sc.nextDouble();
    area = 4 * pi * radius * radius;
    System.out.println("Area of Sphere: "+area);
  }
  public void findvolume() {
    System.out.println("Enter radius of Sphere: ");
    radius = sc.nextDouble();
    area = (4/3) * pi * (radius * radius * radius);
    System.out.println("Volume of Sphere: "+area);
  }
}
class Main {
  public static void main(String args[]) {
    Sphere s = new Sphere();
    s.findarea();
    s.findvolume();
  }
}

Q.3) Write a program to define user-defined exceptions and raise them as per the requirements.
import java.io.*;
class AuthenticationFailure extends Exception {
  public AuthenticationFailure() {
    System.out.println("Invalid Password.");
  }
}
class Main {
  public static void main(String args[]) throws IOException {
    try {
        String pass;
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        System.out.println("Enter Password: ");
        pass = br.readLine();
        if(pass.equals("Rose")) {
          System.out.println("Login Successful!");
        }
        else {
          throw new AuthenticationFailure();
        }
    }
    catch(AuthenticationFailure e) {
      System.out.println(e);
    }
  }
}

Q.4.a) Write a program to demonstrate the method of list interface.
import java.util.*;
class Main {
  public static void main(String args[]) {
    ArrayList<String> obj = new ArrayList<String>();
    obj.add("Ajay");
    obj.add("Aman");
    obj.add("Ganesh");
    obj.add("Laura");
    obj.add("Shaun");
    System.out.println("Original ArrayList: ");
    for(String str:obj)
    System.out.println(str);
    obj.add(0,"Rahul");
    System.out.println("ArrayList after adding element at index 0: ");
    for(String str:obj)
    System.out.println(str);
    obj.remove("Ajay");
    System.out.println("ArrayList after removing an elemnt: ");
    for(String str:obj)
    System.out.println(str);
    obj.remove(1);
    System.out.println("Final ArrayList: ");
    for(String str:obj)
    System.out.println(str);
  }
}

Q.4.b) Write a program to demonstrate the method of Map Interfaces.
import java.util.*;
public class MapExample1
{
public static void main(String[] args)
{
Map map = new HashMap();
map.put(1,"Amit")
map.put(5,"Rahul")
map.put(2,"Jay")
map.put(6,"Amit")
Set set = map.entrySet();
Iterator itr = set.iterator();
while(itr.hasNext())
{
Map.Entry entry = (Map.Entry)itr.next();
System.out.println(entry.getKey() + " " + entry.getValue());
}
}
}

Q.5) Write a program using various swing components design java application to accept a students resume (Design Form)
import javax.swing.*;
class Main
{
JFrame main_frame;
JLabel lname,lcontact,lemail;
JLabel lschool, lsy, lsa;
JLabel ljcollege, ljcy, ljca;
JLabel lscollege, lscy, lsca;
JLabel laddress,lskills;
JTextField sname,scontact,semail;
JTextField sschool, ssy, ssa;
JTextField sjcollege, sjcy,sjca;
JTextField sscollege, sscy, ssca;
JTextArea saddress, sskills;
JRadioButton male;
JRadioButton female;
ButtonGroup gender;
JButton submit,reset;
Main()
{
main_frame=new JFrame("Resume Form");
lname= new JLabel("Name");
lcontact=new JLabel("Contact Number");
lemail=new JLabel("Email");
lname.setBounds(10,20,300,30);
lcontact.setBounds(10,50,300,30);
lemail.setBounds(10,80,300,30);
lschool=new JLabel("School Name");
lsy=new JLabel("Passing Year");
lsa=new JLabel("Aggregate");
lschool.setBounds(10,250,200,50);
lsy.setBounds(310,250,200,50);
lsa.setBounds(610,250,200,50);
ljcollege = new JLabel("Jr. College Name");
ljcy = new JLabel("Passing Year");
ljca = new JLabel("Aggregate");
ljcollege.setBounds(10,350,200,50);
ljcy.setBounds(310,350,200,50);
ljca.setBounds(610,350,200,50);
lscollege=new JLabel("Graduation College Name");
lscy = new JLabel("Passing Year");
lsca = new JLabel("Aggreagate");
lscollege.setBounds(10,450,200,50);
lscy.setBounds(310,450,200,50);
lsca.setBounds(610,450,200,50);
laddress=new JLabel("Address");
lskills = new JLabel("Skills");
laddress.setBounds(10,140,100,30);
lskills.setBounds(300,140,100,30);
sname =new JTextField();
scontact=new JTextField();
semail=new JTextField();
sname.setBounds(220,10,300,30);
scontact.setBounds(220,40,300,30);
semail.setBounds(220,70,300,30);
sschool=new JTextField();
ssy=new JTextField();
ssa=new JTextField();
sschool.setBounds(10,300,300,30);
ssy.setBounds(310,300,300,30);
ssa.setBounds(610,300,300,30);
sjcollege=new JTextField();
sjcy=new JTextField();
sjca=new JTextField();
sjcollege.setBounds(10,400,300,30);
sjcy.setBounds(310,400,300,30);
sjca.setBounds(610,400,300,30);
sscollege=new JTextField();
sscy=new JTextField();
ssca=new JTextField();
sscollege.setBounds(10,500,300,30);
sscy.setBounds(310,500,300,30);
ssca.setBounds(610,500,300,30);
saddress=new JTextArea();
sskills=new JTextArea();
saddress.setBounds(10,170,275,70);
sskills.setBounds(300,170,275,70);
male=new JRadioButton("Male");
female=new JRadioButton("Female");
male.setBounds(220,110,100,30);
female.setBounds(320,110,100,30);
gender=new ButtonGroup();
submit = new JButton("Submit");
reset = new JButton("Reset");
submit.setBounds(275,550,100,30);
reset.setBounds(425,550,100,30);
gender.add(male);
gender.add(female);
main_frame.add(lname);
main_frame.add(lcontact);
main_frame.add(lemail);
main_frame.add(sname);
main_frame.add(scontact);
main_frame.add(semail);
main_frame.add(laddress);
main_frame.add(lskills);
main_frame.add(saddress);
main_frame.add(sskills);
main_frame.add(male);
main_frame.add(female);
main_frame.add(lschool);
main_frame.add(lsy);
main_frame.add(lsa);
main_frame.add(sschool);
main_frame.add(ssy);
main_frame.add(ssa);
main_frame.add(ljcollege);
main_frame.add(ljcy);
main_frame.add(ljca);
main_frame.add(sjcollege);
main_frame.add(sjcy);
main_frame.add(sjca);
main_frame.add(lscollege);
main_frame.add(lscy);
main_frame.add(lsca);
main_frame.add(sscollege);
main_frame.add(sscy);
main_frame.add(ssca);
main_frame.add(submit);
main_frame.add(reset);
main_frame.setSize(1000,1000);
main_frame.setLayout(null);
main_frame.setVisible(true);
}
public static void main(String[] args)
{
new Main();
}
}

Q.6) Write a JDBC program that displays the data of a given table
import java.beans.Statement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import com.mysql.jdbc.Statement;
import java.sql.*;
public class database {
public static void main(String[] args){
//Connection connection = null;
String url="jdbc:mysql://localhost:3306/jdbcdemo";
String username="root";
String password="";
try{
//Class.forName("com.mysql.cj.jdbc.Driver");
Class.forName("com.mysql.jdbc.Driver");
try (Connection connection = DriverManager.getConnection(url,username,password)) {
Statement statement = (Statement) connection.createStatement();
String sql="Select * from students";
ResultSet resultSet = statement.execute(sql);
while(resultSet.next()){
System.out.println(resultSet.getInt(1)+" "+resultSet.getString(2)+" "+resultSet.getInt(3));
}
}
}
catch(Exception e){
System.out.println(e);
}
}
}

Q.7) Java program to create a simple calculator with basic +,-,/,* operations using Java Swing elements.
import java.awt.event.*;
import javax.swing.*;
import java.awt.*;

class calculator extends JFrame implements ActionListener {
    static JFrame f;
    static JTextField l;
    String s0, s1, s2;

    calculator() {
        s0 = s1 = s2 = "";
    }

    public static void main(String args[]) {
        f = new JFrame("calculator");
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }
        calculator c = new calculator();
        l = new JTextField(16);
        l.setEditable(false);
        JButton b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bs, bd, bm, be, beq, beq1;
        b0 = new JButton("0");
        b1 = new JButton("1");
        b2 = new JButton("2");
        b3 = new JButton("3");
        b4 = new JButton("4");
        b5 = new JButton("5");
        b6 = new JButton("6");
        b7 = new JButton("7");
        b8 = new JButton("8");
        b9 = new JButton("9");
        beq1 = new JButton("=");
        ba = new JButton("+");
        bs = new JButton("-");
        bd = new JButton("/");
        bm = new JButton("*");
        beq = new JButton("C");
        be = new JButton(".");
        JPanel p = new JPanel();
        bm.addActionListener(c);
        bd.addActionListener(c);
        bs.addActionListener(c);
        ba.addActionListener(c);
        b9.addActionListener(c);
        b8.addActionListener(c);
        b7.addActionListener(c);
        b6.addActionListener(c);
        b5.addActionListener(c);
        b4.addActionListener(c);
        b3.addActionListener(c);
        b2.addActionListener(c);
        b1.addActionListener(c);
        b0.addActionListener(c);
        be.addActionListener(c);
        beq.addActionListener(c);
        beq1.addActionListener(c);
        p.add(l);
        p.add(ba);
        p.add(b1);
        p.add(b2);
        p.add(b3);
        p.add(bs);
        p.add(b4);
        p.add(b5);
        p.add(b6);
        p.add(bm);
        p.add(b7);
        p.add(b8);
        p.add(b9);
        p.add(bd);
        p.add(be);
        p.add(b0);
        p.add(beq);
        p.add(beq1);
        p.setBackground(Color.blue);
        f.add(p);
        f.setSize(200, 220);
        f.show();
    }

    public void actionPerformed(ActionEvent e) {
        String s = e.getActionCommand();
        if ((s.charAt(0) >= '0' && s.charAt(0) <= '9') || s.charAt(0) == '.') {
            if (!s1.equals(""))
                s2 = s2 + s;
            else
                s0 = s0 + s;
            l.setText(s0 + s1 + s2);
        } else if (s.charAt(0) == 'C') {
            s0 = s1 = s2 = "";
            l.setText(s0 + s1 + s2);
        } else if (s.charAt(0) == '=') {
            double te;
            if (s1.equals("+"))
                te = (Double.parseDouble(s0) + Double.parseDouble(s2));
            else if (s1.equals("-"))
                te = (Double.parseDouble(s0) - Double.parseDouble(s2));
            else if (s1.equals("/"))
                te = (Double.parseDouble(s0) / Double.parseDouble(s2));
            else
                te = (Double.parseDouble(s0) * Double.parseDouble(s2));
            l.setText(s0 + s1 + s2 + "=" + te);
            s0 = Double.toString(te);
            s1 = s2 = "";
        } else {
            if (s1.equals("") || s2.equals(""))
                s1 = s;
            else {
                double te;
                if (s1.equals("+"))
                    te = (Double.parseDouble(s0) + Double.parseDouble(s2));
                else if (s1.equals("-"))
                    te = (Double.parseDouble(s0) - Double.parseDouble(s2));
                else if (s1.equals("/"))
                    te = (Double.parseDouble(s0) / Double.parseDouble(s2));
                else
                    te = (Double.parseDouble(s0) * Double.parseDouble(s2));
                s0 = Double.toString(te);
                s1 = s;
                s2 = "";
            }
            l.setText(s0 + s1 + s2);
        }
    }
}

Q.8) Write a servlet that accept the username html forms and store it take as a cookie another servlet that returns the value of the cookie and servlet.

<!DOCTYPE html>
<html>
<head>
    <title>Username Form</title>
</head>
<body>
    <form action="SetCookieServlet" method="post">
        Enter your username: <input type="text" name="username">
        <input type="submit" value="Submit">
    </form>
</body>
</html>


import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

@WebServlet("/SetCookieServlet")
public class SetCookieServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String username = request.getParameter("username");

        Cookie usernameCookie = new Cookie("username", username);
        usernameCookie.setMaxAge(60 * 60 * 24); // Cookie valid for 1 day

       
        response.addCookie(usernameCookie);

        response.setContentType("text/html");
        response.getWriter().println("Username saved in cookie: " + username);
    }
}


import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

@WebServlet("/GetCookieServlet")
public class GetCookieServlet extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        Cookie[] cookies = request.getCookies();
        String username = null;

        
        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if (cookie.getName().equals("username")) {
                    username = cookie.getValue();
                    break;
                }
            }
        }

        response.setContentType("text/html");
        if (username != null) {
            response.getWriter().println("Username from cookie: " + username);
        } else {
            response.getWriter().println("No username found in cookies.");
        }
    }
}

Q.9) Write a register servlet that accepts the data for a given table and servlet it in the database.
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

@WebServlet("/RegisterServlet")
public class RegisterServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String name = request.getParameter("name");
        String email = request.getParameter("email");
        String password = request.getParameter("password");

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb", "root", "");

            String query = "INSERT INTO users (name, email, password) VALUES (?, ?, ?)";
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setString(1, name);
            ps.setString(2, email);
            ps.setString(3, password);
            ps.executeUpdate();

            ps.close();
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

        response.getWriter().println("Registration successful!");
    }
}


<!DOCTYPE html>
<html>
<head>
    <title>Register</title>
</head>
<body>
    <form action="RegisterServlet" method="post">
        Name: <input type="text" name="name"><br>
        Email: <input type="email" name="email"><br>
        Password: <input type="password" name="password"><br>
        <input type="submit" value="Register">
    </form>
</body>
</html>